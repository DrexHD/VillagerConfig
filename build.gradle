plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" } // modmenu
    maven { url 'https://jitpack.io' }
}

loom {
    accessWidenerPath.set(file("src/main/resources/villagerconfig.accesswidener"))
}


dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    Set<String> apiModules = [
            'fabric-api-base',
            'fabric-command-api-v2',
            'fabric-lifecycle-events-v1',
            'fabric-resource-loader-v0',
            'fabric-transitive-access-wideners-v1'
    ]
    apiModules.forEach {
        modImplementation include(fabricApi.module(it, project.fabric_version))
    }

    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}")))

    modImplementation include("com.github.samolego.Config2Brigadier:config2brigadier-fabric:${project.config2brigadier_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modImplementation ("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modImplementation include("me.zeroeightsix:fiber:${project.fiber_version}")

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(17)
}


// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier("sources")
    from sourceSets.main.allSource
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}
