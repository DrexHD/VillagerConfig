import org.jetbrains.changelog.Changelog

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id 'org.jetbrains.changelog' version '2.+'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" } // modmenu
    maven { url 'https://jitpack.io' }
}

loom {
    accessWidenerPath.set(file("src/main/resources/villagerconfig.accesswidener"))

    runConfigs.all {
        ideConfigGenerated(true)
    }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")
    modImplementation include("me.zeroeightsix:fiber:${project.fiber_version}")

}

publishMods {
    file = remapJar.archiveFile
    type = STABLE
    changelog = fetchChangelog()

    displayName = "VillagerConfig ${version.get()}"
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "400741"
        minecraftVersions.add(project.curseforge_minecraft_version)
    }
    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "OClpEDe3"
        minecraftVersions.add(project.minecraft_version)
    }
    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(21)
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

private String fetchChangelog() {
    def log = getChangelog.changelog.get()
    if (log.has(project.mod_version)) {
        return log.renderItem(
                log.get(project.mod_version).withHeader(false),
                Changelog.OutputType.MARKDOWN
        )
    } else {
        return ""
    }
}
